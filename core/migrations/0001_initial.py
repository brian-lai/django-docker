# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-08-17 18:35
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from django.utils import timezone


def aggregate_statistics(apps, schema):
    UserObjectPermission = apps.get_model('guardian', 'UserObjectPermission')
    ResourceStatistics = apps.get_model('core', 'ResourceStatistics')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    Permission = apps.get_model('auth', 'Permission')

    orms = [
        apps.get_model('clinical', 'Client'),
        apps.get_model('distribution', 'Kit'),
        apps.get_model('gist', 'Subject'),
        apps.get_model('gist', 'Specimen'),
        apps.get_model('gist', 'Sample'),
        apps.get_model('gist', 'Package'),
        apps.get_model('gist', 'PackageItem'),
        apps.get_model('gist', 'EggDonor'),
        apps.get_model('gist', 'SpermDonor'),
        apps.get_model('gist', 'Run'),
        apps.get_model('gist', 'SingleReads'),
        apps.get_model('gist', 'PairedReads'),
        apps.get_model('gist', 'Cohort')
    ]

    # For each model type we want to convert
    for orm in orms:
        # We may want to skip migrating this model for a variety of reasons
        skip = False

        # Check if we should fast track since there are no resources
        if orm.objects.count() == 0:
            skip = True

        # Otherwise process
        stats = []
        orm_content_type = ContentType.objects.get_for_model(orm)
        try:
            orm_permission = Permission.objects.get(codename='creator', content_type=orm_content_type)
        except Permission.DoesNotExist:
            skip = True

        # 1. There are no resources to migrate
        # 2. This is a clean deployment and we want to maintain backwards compatibility
        if skip is True:
            continue

        # For each instance
        for resource in orm.objects.only('id'):
            user = None
            uop = UserObjectPermission.objects.filter(
                permission=orm_permission,
                object_pk=resource.pk,
                content_type=orm_content_type
            ).first()

            if uop is not None:
                user = uop.user

            stats.append(
                ResourceStatistics(
                    resource_content_type=orm_content_type,
                    resource_object_id=resource.id,
                    date_created=getattr(resource, 'date_created', timezone.now()),
                    date_modified=getattr(resource, 'date_created', timezone.now()),
                    created_by=user
                )
            )

        num_created = len(ResourceStatistics.objects.bulk_create(stats))
        total = orm.objects.count()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('guardian', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ResourceStatistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_object_id', models.PositiveIntegerField()),
                ('date_created', models.DateTimeField(editable=False)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('resource_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='resourcestatistics',
            unique_together=set([('resource_content_type', 'resource_object_id')]),
        ),
        migrations.RunPython(aggregate_statistics),
    ]
